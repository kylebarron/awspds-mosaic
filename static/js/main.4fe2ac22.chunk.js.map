{"version":3,"sources":["util.js","webgl-util.js","landsat-tile.js","App.js","index.js"],"names":["landsatColorOps","nBands","colorBands","slice","colorStr","getLandsatUrl","options","bands","mosaicUrl","x","y","z","color_ops","bandsArray","Array","isArray","params","URLSearchParams","join","length","url","toString","getViewStateFromHash","hash","charAt","hashArray","substring","split","map","Number","val","isFinite","zoom","latitude","longitude","viewState","bearing","pitch","Object","keys","forEach","key","DEFAULT_TEXTURE_PARAMETERS","GL","TEXTURE_MIN_FILTER","LINEAR_MIPMAP_LINEAR","TEXTURE_MAG_FILTER","LINEAR","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","imageUrlsToTextures","gl","urls","a","loadImageUrl","image","Texture2D","data","parameters","format","LUMINANCE","Promise","all","outputs","Set","header","textures","fetch","res","JSON","parse","headers","get","arrayBuffer","ImageLoader","LandsatTileLayer","props","minZoom","maxZoom","id","rgbBands","TileLayer","getTileData","args","assign","renderSubLayers","modules","combineBands","panUrl","imagePan","push","pansharpenBrovey","imageBands","tile","bbox","west","south","east","north","moduleProps","RasterLayer","bounds","mapStyle","require","initialViewState","maxPitch","App","state","window","location","_onWebGLInitialized","setState","_onMapLoad","_map","deck","_deck","addLayer","MapboxLayer","onViewStateChange","this","layers","ref","controller","onWebGLInitialized","glOptions","stencil","getMap","onLoad","mapOptions","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4fe2ac22.chunk.js","sourcesContent":["/**\n * Get color operations string for landsat bands\n * @param {Number} nBands Number of bands\n */\nfunction landsatColorOps(nBands) {\n  const colorBands = 'RGB'.slice(0, nBands);\n  let colorStr = `gamma ${colorBands} 3.5, sigmoidal ${colorBands} 15 0.35`;\n\n  if (nBands === 3) {\n    colorStr += ', saturation 1.7';\n  }\n  return colorStr;\n}\n\n/**\n * Get URL including query string to fetch Landsat tile\n * @param {object} options:\n * bands: array of band numbers\n * mosaicUrl: url to mosaicJSON, parsed by backend\n * x: mercator tile x\n * y: mercator tile y\n * z: mercator tile z\n * color_ops: Custom color_ops rio-color string\n */\nexport function getLandsatUrl(options) {\n  const { bands, mosaicUrl, x, y, z, color_ops } = options || {};\n  const bandsArray = Array.isArray(bands) ? bands : [bands];\n  const params = new URLSearchParams({\n    bands: bandsArray.join(','),\n    color_ops: color_ops || landsatColorOps(bandsArray.length),\n    url: mosaicUrl,\n  });\n  let baseUrl = `https://us-west-2-lambda.kylebarron.dev/landsat/tiles/${z}/${x}/${y}@2x.jpg?`;\n  return baseUrl + params.toString();\n}\n\n/**\n * Get ViewState from page URL hash\n * Note: does not necessarily return all viewState fields\n * @param {string} hash Page URL hash\n */\nexport function getViewStateFromHash(hash) {\n  if (!hash || hash.charAt(0) !== '#') {\n    return {};\n  }\n\n  // Split the hash into an array of numbers\n  let hashArray = hash\n    // Remove # symbol\n    .substring(1)\n    .split('/')\n    .map(Number);\n\n  // Remove non-numeric values\n  hashArray = hashArray.map(val => (Number.isFinite(val) && val) || null);\n\n  // Order of arguments:\n  // https://docs.mapbox.com/mapbox-gl-js/api/\n  const [zoom, latitude, longitude, bearing, pitch] = hashArray;\n  const viewState = {\n    bearing,\n    latitude,\n    longitude,\n    pitch,\n    zoom,\n  };\n\n  // Delete null keys\n  // https://stackoverflow.com/a/38340730\n  Object.keys(viewState).forEach(\n    key => viewState[key] == null && delete viewState[key]\n  );\n\n  return viewState;\n}\n","import { parse } from '@loaders.gl/core';\nimport { ImageLoader } from '@loaders.gl/images';\nimport { Texture2D } from '@luma.gl/core';\nimport GL from '@luma.gl/constants';\n\nconst DEFAULT_TEXTURE_PARAMETERS = {\n  [GL.TEXTURE_MIN_FILTER]: GL.LINEAR_MIPMAP_LINEAR,\n  [GL.TEXTURE_MAG_FILTER]: GL.LINEAR,\n  [GL.TEXTURE_WRAP_S]: GL.CLAMP_TO_EDGE,\n  [GL.TEXTURE_WRAP_T]: GL.CLAMP_TO_EDGE,\n};\n\nexport async function imageUrlsToTextures(gl, urls) {\n  // Single image, not array\n  if (!Array.isArray(urls)) {\n    const { image } = await loadImageUrl(urls);\n    return new Texture2D(gl, {\n      data: image,\n      parameters: DEFAULT_TEXTURE_PARAMETERS,\n      format: GL.LUMINANCE,\n    });\n  }\n\n  const outputs = await Promise.all(urls.map(url => loadImageUrl(url)));\n  const assets = new Set(...outputs.map(({ header }) => header));\n  const textures = outputs.map(({ image }) => {\n    return new Texture2D(gl, {\n      data: image,\n      parameters: DEFAULT_TEXTURE_PARAMETERS,\n      format: GL.LUMINANCE,\n    });\n  });\n  return textures;\n}\n\nasync function loadImageUrl(url) {\n  const res = await fetch(url);\n  const header = JSON.parse(res.headers.get('x-assets') || '[]');\n  return {\n    header,\n    image: await parse(res.arrayBuffer(), ImageLoader),\n  };\n}\n","import { TileLayer } from \"@deck.gl/geo-layers\";\nimport {\n  RasterLayer,\n  combineBands,\n  pansharpenBrovey\n} from \"@kylebarron/deck.gl-raster\";\nimport { getLandsatUrl } from \"./util\";\nimport { imageUrlsToTextures } from \"./webgl-util\";\n\nexport function LandsatTileLayer(props) {\n  const {\n    gl,\n    // Bug in TileLayer? with minZoom=7, zoom 7 tiles are loaded when map is at\n    // zoom >= 6.\n    minZoom = 7,\n    maxZoom = 12,\n    id = \"landsat-tile-layer\",\n    mosaicUrl,\n    color_ops,\n    rgbBands\n  } = props || {};\n\n  return new TileLayer({\n    id,\n    minZoom,\n    maxZoom,\n    getTileData: args =>\n      getTileData(\n        Object.assign(args, {\n          gl,\n          mosaicUrl,\n          color_ops,\n          rgbBands\n        })\n      ),\n    renderSubLayers\n  });\n}\n\nasync function getTileData(options) {\n  const { gl, x, y, z, mosaicUrl, color_ops, rgbBands = [4, 3, 2] } =\n    options || {};\n\n  const modules = [combineBands];\n  let imagePan;\n  if (z >= 12) {\n    const panUrl = getLandsatUrl({ x, y, z, bands: 8, mosaicUrl, color_ops });\n    imagePan = imageUrlsToTextures(gl, panUrl);\n    modules.push(pansharpenBrovey);\n  }\n\n  // Load landsat urls\n  const urls = [\n    getLandsatUrl({ x, y, z, bands: rgbBands[0], mosaicUrl, color_ops }),\n    getLandsatUrl({ x, y, z, bands: rgbBands[1], mosaicUrl, color_ops }),\n    getLandsatUrl({ x, y, z, bands: rgbBands[2], mosaicUrl, color_ops })\n  ];\n\n  const imageBands = imageUrlsToTextures(gl, urls);\n  await Promise.all([imagePan, imageBands]);\n\n  return { imageBands: await imageBands, imagePan: await imagePan, modules };\n}\n\nfunction renderSubLayers(props) {\n  const {\n    bbox: { west, south, east, north }\n  } = props.tile;\n  const { modules, ...moduleProps } = props.data;\n\n  return new RasterLayer(props, {\n    modules,\n    moduleProps,\n    bounds: [west, south, east, north]\n  });\n}\n","import React from \"react\";\nimport DeckGL from \"@deck.gl/react\";\nimport { MapboxLayer } from \"@deck.gl/mapbox\";\nimport { StaticMap } from \"react-map-gl\";\nimport { LandsatTileLayer } from \"./landsat-tile\";\nimport { getViewStateFromHash } from \"./util\";\n\nimport \"./App.css\";\n\nconst mapStyle = require(\"./style.json\");\n\nconst initialViewState = {\n  longitude: -112.1861,\n  latitude: 36.1284,\n  zoom: 11.5,\n  pitch: 0,\n  bearing: 0,\n  maxPitch: 85\n};\n\nexport default class App extends React.Component {\n  state = {\n    gl: null,\n    viewState: {\n      ...initialViewState,\n      ...getViewStateFromHash(\n        typeof window !== \"undefined\" ? window.location.hash : \"\"\n      )\n    }\n  };\n\n  // DeckGL and mapbox will both draw into this WebGL context\n  _onWebGLInitialized = gl => {\n    this.setState({ gl });\n  };\n\n  _onMapLoad = () => {\n    const map = this._map;\n    const deck = this._deck;\n\n    // This id has to match the id of the Deck layer\n    map.addLayer(\n      new MapboxLayer({ id: \"landsat-tile-layer\", deck }),\n      \"aeroway_fill\"\n    );\n  };\n\n  onViewStateChange = ({ viewState }) => {\n    this.setState({ viewState });\n  };\n\n  render() {\n    const { gl, viewState } = this.state;\n    const landsatMosaicUrl = \"dynamodb://us-west-2/landsat8-2015-spring\";\n\n    const layers = [\n      new LandsatTileLayer({\n        id: \"landsat-tile-layer\",\n        gl,\n        mosaicUrl: landsatMosaicUrl,\n        rgbBands: [4, 3, 2]\n      })\n    ];\n\n    return (\n      <DeckGL\n        ref={ref => {\n          this._deck = ref && ref.deck;\n        }}\n        layers={layers}\n        viewState={viewState}\n        onViewStateChange={this.onViewStateChange}\n        controller\n        onWebGLInitialized={this._onWebGLInitialized}\n        glOptions={{ stencil: true }}\n      >\n        {gl && (\n          <StaticMap\n            ref={ref => {\n              this._map = ref && ref.getMap();\n            }}\n            gl={gl}\n            onLoad={this._onMapLoad}\n            mapStyle={mapStyle}\n            mapOptions={{ hash: true }}\n          />\n        )}\n      </DeckGL>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}